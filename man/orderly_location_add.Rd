% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/location.R
\name{orderly_location_add}
\alias{orderly_location_add}
\title{Add a new location}
\usage{
orderly_location_add(name, type, args, root = NULL, locate = TRUE)
}
\arguments{
\item{name}{The short name of the location to use.  Cannot be in
use, and cannot be one of \code{local} or \code{orphan}}

\item{type}{The type of location to add. Currently supported
values are \code{path} (a location that exists elsewhere on the
filesystem) and \code{http} (a location accessed over outpack's http
API).}

\item{args}{Arguments to the location driver. The arguments here
will vary depending on the type used, see Details.}

\item{root}{The path to the root directory, or \code{NULL} (the
default) to search for one from the current working directory if
\code{locate} is \code{TRUE}. This function does not require that the
directory is configured for orderly, and can be any \code{outpack}
root (see \link{orderly_init} for details).}

\item{locate}{Logical, indicating if the root should be searched
for.  If \code{TRUE}, then we looks in the directory given for \code{root}
(or the working directory if \code{NULL}) and then up through its
parents until it finds an \code{.outpack} directory or
\code{orderly_config.yml}}
}
\value{
Nothing
}
\description{
Add a new location - a place where other packets might be found
and pulled into your local archive.  Currently only file and http
based locations are supported, with limited support for custom
locations. Note that adding a location does \emph{not} pull metadata
from it, you need to call
\link{orderly_location_pull_metadata} first.
}
\details{
We currently support two types of locations - \code{path}, which points
to an outpack archive accessible by path (e.g., on the same
computer or on a mounted network share), \code{http}, which requires
that an outpack server is running at some url and uses an HTTP API
to communicate, and \code{packit}, which uses Packit as a web
server.  More types may be added later, and more configuration
options to these location types will definitely be needed in
future.

Configuration options for different location types:

\strong{Path locations}:
\itemize{
\item \code{path}: The path to the other archive root. This should
generally be an absolute path, or the behaviour of outpack will
be unreliable.
}

\strong{HTTP locations}:

Accessing outpack over HTTP requires that an outpack server is
running. The interface here is expected to change as we expand
the API, but also as we move to support things like TLS and
authentication.
\itemize{
\item \code{url}: The location of the server, including protocol, for
example \verb{http://example.com:8080}
}

\strong{Packit locations}:

Packit locations work over HTTPS, and include everything in an
outpack location but also provide authentication and later will
have more capabilities we think.
\itemize{
\item \code{url}: The location of the server
\item \code{token}: The value for your your login token (currently this is
a GitHub token with \code{read:org} scope). If missing or NULL, orderly2 will
perform an interactive authentication against GitHub to obtain one.
}

\strong{Custom locations}:

All outpack implementations are expected to support path and http
locations, with the standard arguments above.  But we expect that
some implementations will support custom locations, and that the
argument lists for these may vary between implementations. To
allow this, you can pass a location of type "custom" with a list
of arguments.  We expect an argument 'driver' to be present among
this list.  For an example of this in action, see the
\href{https://mrc-ide.github.io/outpack.sharepoint}{\code{outpack.sharepoint}}
package.

\emph{Be warned that we may change this interface in future, in which
case you may need to update your configuration.}
}
\section{Warning}{


The API here may change as we move to support different types of
locations.
}

